---
title: Basic Permissions Class
description: A simple class to manage permissions
tags:
    - authorization
    - javascript
    - authentication
---

Basic permissions example with bitwise

Usage example at the bottom of the codeblock

```js
export class Permission {
  private permissions = BigInt(0);

  private PERMISSIONS = {
    none: BigInt(0),
    read: BigInt(1) << BigInt(1),
    write: BigInt(1) << BigInt(2),
    admin: BigInt(1) << BigInt(3),
    owner: BigInt(1) << BigInt(4),
    // Add more permissions here by increasing the last number by 1
  };

  constructor(permission = BigInt(0)) {
    this.permissions = permission;
  }

  getPermissions(): { string: string; array: PermissionKeys[] } {
    const permissionKeys = Object.keys(this.PERMISSIONS) as PermissionKeys[];
    const userPermissions = permissionKeys.filter((permissionKey) => {
      const permissionValue = this.PERMISSIONS[permissionKey];
      return (this.permissions & permissionValue) !== BigInt(0);
    });
    return { string: this.permissions.toString(), array: userPermissions };
  }

  setPermissions(
    permissionarray: PermissionKeys[]
  ): ReturnType<Permission["getPermissions"]> {
    let permissions = BigInt(0);
    permissionarray.forEach((permissionKey) => {
      const permissionValue = this.PERMISSIONS[permissionKey];
      permissions += permissionValue || BigInt(0);
    });
    this.permissions = permissions;
    return this.getPermissions();
  }

  removePermissions(
    permissionarray: PermissionKeys[]
  ): ReturnType<Permission["getPermissions"]> {
    permissionarray.forEach((permissionKey) => {
      if (!this.PERMISSIONS[permissionKey]) return this.getPermissions();

      const permissionValue = this.PERMISSIONS[permissionKey];
      this.permissions &= ~permissionValue;
    });
    return this.getPermissions();
  }

  addPermissions(
    permissionarray: PermissionKeys[]
  ): ReturnType<Permission["getPermissions"]> {
    permissionarray.forEach((permissionKey) => {
      if (!this.PERMISSIONS[permissionKey]) return this.getPermissions();
      const permissionValue = this.PERMISSIONS[permissionKey];
      this.permissions |= permissionValue;
    });
    return this.getPermissions();
  }

  hasAnyPermission(permissionarray: PermissionKeys[]): boolean {
    return permissionarray.some((permissionKey) => {
      const permissionValue = this.PERMISSIONS[permissionKey];
      return (this.permissions & permissionValue) !== BigInt(0);
    });
  }

  hasAllPermissions(permissionarray: PermissionKeys[]): boolean {
    return permissionarray.every((permissionKey) => {
      const permissionValue = this.PERMISSIONS[permissionKey];
      return (this.permissions & permissionValue) !== BigInt(0);
    });
  }

  getPermissionKeys(): PermissionKeys[] {
    return Object.keys(this.PERMISSIONS) as PermissionKeys[];
  }
}

export type PermissionKeys = keyof Permission["PERMISSIONS"];


// How to use
import { Permission, type PermissionKeys } from "./permission";

// type variable
let permission: PermissionKeys


const permission = new Permission(BigInt(0));

// set permissions
permission.setPermissions(["admin", "owner"]); // { string: "24", array: [ 'admin', 'owner' ] }

// get permissions
permission.getPermissions(); // { string: "24", array: [ 'admin', 'owner' ] }

// add permissions
permission.addPermissions(["read"]); // { string: "26", array: ['read', 'admin', 'owner' ] }

// remove permissions
permission.removePermissions(["admin"]); // { string: "18", array: [ 'read', 'owner' ] }

// returns true if atleast one permission matches
permission.hasAnyPermission(["read", "write", "admin"]); // true

// returns true if all permissions match
permission.hasAllPermissions(["admin"]); // false

// get all available permissions
permission.getPermissionKeys(); // [ 'none', 'read', 'write', ... ]

```